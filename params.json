{"name":"Freight-tools","tagline":"A utility to construct disk images suitable for use with systemd-nspawn based on stackable manifest files","body":"# freight-tools\r\nA utility suite to construct disk images suitable for use with systemd-nspawn based on stackable manifest files \r\n\r\n# About\r\nFreight is a system for creating and managing containers using existing\r\npackaging tools and distribution mechanisms.  Freight focuses on using a\r\ndistributions existing infrastructure tools to create, distribute and manage\r\ncontainers on host systems across a site.  Doing so enables reuse of\r\nadministrative skills and distribution features to create a robust, flexible and\r\nsecure managed container environment.\r\n\r\n# Key features\r\n\r\n## Distribution based container creation\r\nFreight uses well established packaging mechanisms (currently rpm/yum, but\r\nothers can easily be added).  To transform a manifest of standard packages into\r\na container file system.  This has the advantage of ensuring that the package\r\nmanifest is included in the container image so that it can be administratively\r\ninterrogated later using those same tools (most notably to determine the need\r\nfor package updates)\r\n\r\n## Distribution based container packaging\r\nContainerized file systems are then packaged into their own rpm, which provides\r\nseveral advantages:\r\n* Reuse of existing distribution mechanisms (yum repositories)\r\n* Clear, well understood versioning that is human readable\r\n* Ease of updates on remote container hosts\r\n* Support for multiple architectures\r\n\r\n## Update detection\r\nA key tenet of distribution packaging is the ability to identify the need to\r\nupdate a package on a system (for security fixes/enhancements/etc).  By reusing\r\nthose distribution mechanisms, the same advantages can be applied to containers.\r\nFreight allows a container rpm to be installed temporarily and inspected using\r\nyum so that the need for updates can be reported to an administrator, and\r\nappropriate action can be taken\r\n\r\n## Manifest Level inheritance\r\nContainers are generally considered to be immutable.  This gives rise to the\r\nneed to create layered containers in order to address the need for customization\r\nat a given site.  While layering (via unionfs or overlayfs) provides an elegant\r\nsolution to the problem, it also creates an issue with aliasing, in which the\r\ncontents of a base layer image may be masked by a higher layer image, leading to\r\npotential security holes.  Freight addresses this by preforming inheritance at\r\nthe manifest level.  By using distribution packaging dependency resolution and\r\nversioning, even inherited/layered lists of packages can be resolved to a single\r\nset of packages at their latest versions, ensuing that you know what will be\r\nexecuted in a container.\r\n\r\n## Binary level inheritance\r\nIn addition to Manifest level inheritance, we can create safe binary level\r\ninheritance.  By using btrfs (a requirement for Freight), we can use subvolume\r\nsnapshots to encode container images that are very small, and based off a parent\r\ncontainer image.  ","google":"UA-268719-4","note":"Don't delete this file! It's used internally to help with page regeneration."}