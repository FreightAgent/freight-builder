#  -*- Mode: rpm-spec; indent-tabs-mode: nil -*- */
#
#
#  Copyright 2018 Neil Horman 
#
#  Freight is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with systemd; If not, see <http://www.gnu.org/licenses/>.

# This file defines the global macros used in the constuction of 
# Freight container rpms
#


#
# freight_package
# Marks the spec file as freight container rpm, and sets up 
# the proper global variables
# Must be called at the top of the spec file
%freight_package_common() %{expand:
%global __arch_install_post %nil  
%global _build_id_links none 
%global ctreeroot %{name}_%{version}_%{release}
%global freightimagepath /var/lib/freight/machines
%global parentctree %1
AutoReqProv: no 
Provides: freight(%{ctreeroot}) 
}

%freight_base_package() %{expand:
%freight_package_common none
}

%freight_package() %{expand:
%freight_package_common %*
BuildRequires: freight(%1) 
Requires: freight(%1) 
}

#
#Create the base container filesystem layout
#
%create_freight_container_dirs() (\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/rootfs;\
mkdir -p %{buildroot}/%{_unitdir}/;\
mkdir -p %{buildroot}/%{_sysconfdir}/sysconfig/freight;\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/etc/;\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/usr/lib;\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/work;\
if [ "%{parentctree}" == "none" ];\
then\
	mkdir -p %{buildroot}/%{freightimagepath}/none/rootfs;\
fi;\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/instances;\
echo %{parentctree} >> %{buildroot}/%{freightimagepath}/%{ctreeroot}/parent;\
mkdir -p %{buildroot}/%{freightimagepath}/%{ctreeroot}/rootfs/etc/;\
ln -s ../usr/lib/os-release %{buildroot}/%{freightimagepath}/%{ctreeroot}/rootfs/etc/os-release;\
)

#
#Mount the container fs for use with install macros below
#
%activate_container_fs() (\
	mkdir -p /var/lib/freight/machines/none/rootfs;\
	mkdir -p %{buildroot}/var/lib/machines/%{ctreeroot}-default;\
	freight-cmd mount %{ctreeroot} default %{buildroot};\
	mkdir -p %{buildroot}/var/lib/machines/%{ctreeroot}-default/etc/;\
	cp  -L /etc/resolv.conf %{buildroot}/var/lib/machines/%{ctreeroot}-default/etc/resolv.conf;\
)

#
#Unmount the container fs after installation is complete
#
%finalize_container_fs() (\
	umount %{buildroot}/var/lib/machines/%{ctreeroot}-default;\
	rm -rf %{buildroot}/var/lib/machines/%{ctreeroot}-default;\
)

#
# Macros for installing files to the container
# install_base_container_fs does the initial population of the rootfs with the
# dnf fedora-release and fedora-repos packages
#
%install_base_container_fs() (\
	/usr/bin/dnf --noplugins -v -y --installroot=%{buildroot}/%{freightimagepath}/%{ctreeroot}/rootfs/ --releasever %{fedora} install dnf fedora-release fedora-repos;\
	/usr/bin/dnf --noplugins -v -y --installroot=%{buildroot}/%{freightimagepath}/%{ctreeroot}/rootfs/ clean all;\
)

#
# install additional packages to the container
# installs packages defined by container_packages via chroot operation
# to ensure clean environment during install
%install_packages_to_container() (\
	/usr/sbin/chroot %{buildroot}/var/lib/machines/%{ctreeroot}-default/ /usr/bin/dnf --noplugins -v -y install %{container_packages};\
	/usr/sbin/chroot %{buildroot}/var/lib/machines/%{ctreeroot}-default /usr/bin/dnf --noplugins -v -y clean all;\
)

#Convienience macros to fix up selinux context
%set_selinux_file_context() (\
	/usr/sbin/semanage fcontext --modify -t %1 "%{buildroot}/var/lib/machines/%{ctreeroot}-default/%2" || /usr/sbin/semanage fcontext --add -t %1 "%{buildroot}/var/lib/machines/%{ctreeroot}-default/%2";\
)

%restorecon() (\
	/usr/sbin/restorecon -v "%{buildroot}/var/lib/machines/%{ctreeroot}-default/%1";\
)

#Macro to assign root passwd to the container
%set_container_root_pw() (\
	/usr/sbin/chroot %{buildroot}/var/lib/machines/%{ctreeroot}-default /bin/sh -c "echo %1 | passwd --stdin root"\
)

#
#Convienience Macro to run a command inside the container fs
#
%run_in_container() (\
	chroot %{buildroot}/var/lib/machines/%{ctreeroot}-default %*\
)

#
#Macro to create the container service
#
%create_freight_service() %{expand:
cat > %{buildroot}/%{_unitdir}/%{ctreeroot}@.service << 'EOF'
[Unit]
Description=%{ctreeroot} service  for Freight
[Service]
Type=simple
ExecStartPre=/usr/bin/mkdir /var/lib/machines/%{ctreeroot}-%I
ExecStartPre=/usr/bin/mkdir -p %{freightimagepath}/%{ctreeroot}/instances/%I/work
ExecStartPre=/usr/bin/mkdir -p %{freightimagepath}/%{ctreeroot}/instances/%I/rootfs
ExecStartPre=/usr/bin/freight-cmd mount %{ctreeroot} %I
ExecStart=/usr/bin/systemd-nspawn -b --machine=%{ctreeroot}-%I --directory=/var/lib/machines/%{ctreeroot}-%I/
ExecStop=/usr/bin/systemd-nspawn poweroff %{ctreeroot}-%I
ExecStopPost=/usr/bin/freight-cmd unmount %{ctreeroot} %I
ExecStopPost=/usr/bin/rm -rf /var/lib/machines/%{ctreeroot}-%I
ExecStopPost=/usr/bin/rm -rf %{freightimagepath}/%{ctreeroot}/instances/%I/
[Install]
Also=dbus.service
DefaultInstance=default
EOF
}


#
#Macro to create sysconf file for default service instance
#
%create_freight_option_file() %{expand:
mkdir -p %{buildroot}/etc/systemd/nspawn/
echo "# See man(5) systemd.nspawn for a list of options that can be specified here" > %{buildroot}/etc/systemd/nspawn/%{ctreeroot}-default.nspawn
echo "[Exec]" >> %{buildroot}/etc/systemd/nspawn/%{ctreeroot}-default.nspawn
echo "Boot=yes" >> %{buildroot}/etc/systemd/nspawn/%{ctreeroot}-default.nspawn
}


